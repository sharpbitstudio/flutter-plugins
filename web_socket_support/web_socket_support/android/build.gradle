group 'tech.sharpbitstudio.web_socket_support'
version '0.0.1'

buildscript {
  ext {
    android_build_gradle_version = '4.1.3'
  }
  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$android_build_gradle_version"
  }
}

ext {
  lifecycle_version = "2.2.0"
  okhttp_version = '4.9.1'
  lombok_version = '1.18.18'

  // java desugar
  desugar_jdk_libs_version = '1.1.1'

  // junit
  junit_version = '5.7.0'
  mockito_version = '3.8.0'
}

rootProject.allprojects {
  repositories {
    google()
    jcenter()
  }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.ben-manes.versions'

android {
  compileSdkVersion 29
  compileOptions {
    // Flag to enable support for the new language APIs
    coreLibraryDesugaringEnabled true
    // Sets Java compatibility to Java 8
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  defaultConfig {
    minSdkVersion 21
    targetSdkVersion 29
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  lintOptions {
    disable 'InvalidPackage'
  }
  buildTypes {
    debug{
      testCoverageEnabled false // should be true, bug: https://issuetracker.google.com/issues/178015739
      minifyEnabled false
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  testOptions {
    execution 'ANDROIDX_TEST_ORCHESTRATOR'
    animationsDisabled true
    unitTests {
      includeAndroidResources = true
    }
  }
}

dependencies {
  implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugar_jdk_libs_version"

  // lombok
  compileOnly "org.projectlombok:lombok:$lombok_version"
  annotationProcessor "org.projectlombok:lombok:$lombok_version"

  // tests
  testImplementation 'junit:junit:4.13.2'
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: mockito_version
}

// ben-manes
dependencyUpdates {

  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }

  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}
